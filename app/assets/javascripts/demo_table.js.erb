$(function(){

    var store = {
        store: {
            type: "odata",
                // Burası bizim ajax linkimiz olcak
                url: "https://jsonplaceholder.typicode.com/users",
                beforeSend: function(request) {
                // Buradan url'ye parametre ekliyoruz
                // request.params.startDate = "2018-05-10";
                // request.params.endDate = "2018-05-15";
            },
            key: 'id'
        }
    }

    /* var employeesStore = new DevExpress.data.ArrayStore({
        key: "id",
        data: employees
    }); */

    /*var deleteButton = $("#gridDeleteSelected").dxButton({
        text: "Delete Selected Records",
        height: 34,
        disabled: true,
        onClick: function () {
            $.each(dataGrid.getSelectedRowKeys(), function() {
                employeesStore.remove(this);
            });
            dataGrid.refresh();
        }
    }).dxButton("instance");*/

    var dataGrid = $("#gridContainer").dxDataGrid({
        dataSource: store,
        keyExpr: "id",
        height: 850,
        columnsAutoWidth: true,
        allowColumnReordering: true,
        showBorders: true,
        focusedRowEnabled: true,
        selection: {
            mode: "multiple"
        },
        filterRow: {
            visible: true,
            applyFilter: "auto"
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        scrolling: {
            mode: 'infinite'
        },
        paging: {
            enabled: true,
            pageSize: 5,
            pageIndex: 1
        },
        pager: {
            showPageSizeSelector: true,
            allowedPageSizes: [2, 5, 10],
            showNavigationButtons: true
        },
        editing: {
            mode: "cell",
            allowUpdating: true
        },
        grouping: {
            autoExpandAll: true,
        },
        groupPanel: {
            visible: true
        },
        // Drag bırak işimiz yok
        /* rowDragging: {
            allowReordering: true,
            onReorder: function(e) {
                var visibleRows = e.component.getVisibleRows(),
                    toIndex = employees.indexOf(visibleRows[e.toIndex].data),
                    fromIndex = employees.indexOf(e.itemData);

                employees.splice(fromIndex, 1);
                employees.splice(toIndex, 0, e.itemData);

                e.component.refresh();
            }
        }, */
        onSelectionChanged: function(e) {
            e.component.refresh(true);
        },
        columns: [
            "name",
            "username",
            "email",
            {
                dataField: "position",
                width: 170
            },
            {
                dataField: "starting_work",
                dataType: "date"
            },
            {
                dataField: "salary"
            }
        ],
        summary: {
            totalItems: [{
                    column: "first_name",
                    summaryType: "count",
                    displayFormat: "{0} rows"
                },
                {
                    name: "SelectedRowsSummary",
                    showInColumn: "salary",
                    displayFormat: "Sum {0}",
                    valueFormat: "currency",
                    summaryType: "custom"
                }],
            groupItems: [{
                column: "first_name",
                summaryType: "count",
                displayFormat: "{0} orders",
            }, {
                column: "position",
                summaryType: "count",
                displayFormat: "{0} orders",
            }],
            calculateCustomSummary: function (options) {
                if (options.name === "SelectedRowsSummary") {
                    if (options.summaryProcess === "start") {
                        options.totalValue = 0;
                    }
                    if (options.summaryProcess === "calculate") {
                        if (options.component.isRowSelected(options.value.ID)) {
                            options.totalValue = options.totalValue + options.value.Salary;
                        }
                    }
                }
            }
        },

    }).dxDataGrid("instance");

    /* ------------------------------ */

    var salesPivotGrid = $("#sales").dxPivotGrid({
        allowSortingBySummary: true,
        allowSorting: true,
        allowFiltering: true,
        height: 759,
        showBorders: true,
        scrolling: {
            mode: "virtual"
        },
        fieldPanel: {
            showColumnFields: true,
            showDataFields: true,
            showFilterFields: true,
            showRowFields: true,
            allowFieldDragging: true,
            visible: true
        },

        dataSource: {
            fields: [{
                caption: "Position",
                width: 120,
                dataField: "Position",
                area: "row",
                headerFilter: {
                    allowSearch: true
                }
            }, {
                dataField: "StartingWork",
                dataType: "StartingWork",
                area: "column"
            }, {
                caption: "Salary",
                dataField: "Salary",
                dataType: "number",
                summaryType: "sum",
                format: "currency",
                area: "data"
            }],
            store: store
        },
        fieldChooser: {
            enabled: false
        },
        onContextMenuPreparing: contextMenuPreparing
    }).dxPivotGrid("instance");

    $("#show-data-fields").dxCheckBox({
        text: "Show Data Fields",
        value: true,
        onValueChanged: function(data) {
            salesPivotGrid.option("fieldPanel.showDataFields", data.value);
        }
    });

    $("#show-row-fields").dxCheckBox({
        text: "Show Row Fields",
        value: true,
        onValueChanged: function(data) {
            salesPivotGrid.option("fieldPanel.showRowFields", data.value);
        }
    });

    $("#show-column-fields").dxCheckBox({
        text: "Show Column Fields",
        value: true,
        onValueChanged: function(data) {
            salesPivotGrid.option("fieldPanel.showColumnFields", data.value);
        }
    });

    $("#show-filter-fields").dxCheckBox({
        text: "Show Filter Fields",
        value: true,
        onValueChanged: function(data) {
            salesPivotGrid.option("fieldPanel.showFilterFields", data.value);
        }
    });

    function contextMenuPreparing(e) {
        var dataSource = e.component.getDataSource(),
            sourceField = e.field;

        if (sourceField) {
            if(!sourceField.groupName || sourceField.groupIndex === 0) {
                e.items.push({
                    text: "Hide field",
                    onItemClick: function () {
                        var fieldIndex;
                        if(sourceField.groupName) {
                            fieldIndex = dataSource.getAreaFields(sourceField.area, true)[sourceField.areaIndex].index;
                        } else {
                            fieldIndex = sourceField.index;
                        }

                        dataSource.field(fieldIndex, {
                            area: null
                        });
                        dataSource.load();
                    }
                });
            }

            if (sourceField.dataType === "number") {
                var setSummaryType = function (args) {
                        dataSource.field(sourceField.index, {
                            summaryType: args.itemData.value
                        });

                        dataSource.load();
                    },
                    menuItems = [];

                e.items.push({ text: "Summary Type", items: menuItems });

                $.each(["Sum", "Avg", "Min", "Max"], function(_, summaryType) {
                    var summaryTypeValue = summaryType.toLowerCase();

                    menuItems.push({
                        text: summaryType,
                        value: summaryType.toLowerCase(),
                        onItemClick: setSummaryType,
                        selected: e.field.summaryType === summaryTypeValue
                    });
                });
            }
        }
    }
    var pivotModeRadio = $("#pivot-mode-radio").dxCheckBox({
        text: "Pivot Mode",
        value: true,
        onValueChanged: function(data) {
            var pivotgrid = document.getElementById("sales");
            var datagrid = document.getElementById("data-grid-demo");

            if (data.value == true){
                pivotgrid.style.display = "block";
                datagrid.style.display = "none";
            }
            else {
                datagrid.style.display = "block";
                pivotgrid.style.display = "none";
            }
        }
    }).dxCheckBox("instance");;
    var salesFieldChooser = $("#sales-fieldchooser").dxPivotGridFieldChooser({
        dataSource: salesPivotGrid.getDataSource(),
        texts: {
            allFields: "All",
            columnFields: "Columns",
            dataFields: "Data",
            rowFields: "Rows",
            filterFields: "Filter"
        },
        height: 685,
        layout: 1
    }).dxPivotGridFieldChooser("instance");

});