function isNotEmpty(value) {
    return value !== undefined && value !== null && value !== "";
}
var store = new DevExpress.data.CustomStore({
    key: "id",
    load: function (loadOptions) {
        //var deferred = $.Deferred(),
        args = {};
        [
            "skip",
            "take",
            "requireTotalCount",
            "requireGroupCount",
            "sort",
            "filter",
            "totalSummary",
            "group",
            "groupSummary"
        ].forEach(function (i) {
            if (i in loadOptions && isNotEmpty(loadOptions[i]))
                args[i] = JSON.stringify(loadOptions[i]);
        });
        return sendRequest("/data_tables/prepare_data", "GET", args)
    },

    insert: function (values) {
        return sendRequest("/data_tables", "POST", {
            data_table: values
        });
    },

    update: function (id, values) {
        return sendRequest("/data_tables/"+id, "PUT", {
            data_table: values
        });
    },

    remove: function (id) {
        args = {}
        return sendRequest("/data_tables/" + id, "DELETE", args);
    }
});

var dataGrid = $("#gridContainer").dxDataGrid({
    dataSource: store,
    remoteOperations: true,
    keyExpr: "id",
    height: 850,
    paging: {
        pageSize: 10
    },
    pager: {
        showPageSizeSelector: true,
        allowedPageSizes: [10, 20, 50],
        showInfo: true
    },
    export: {
        enabled: true,
        allowExportSelectedData: true,
        proxyUrl: "/data_tables/proxy"
    },
    stateStoring: {
        enabled: true,
        type: "localStorage",
        storageKey: "storage",
        customSave: function (state) {
            console.log(state);
        }
    },
    onExporting: export_function,
    columnsAutoWidth: true,
    selection: {
        mode: "multiple"
    },
    filterRow: {
        visible: true,
        applyFilter: "auto"
    },
    searchPanel: {
        visible: true,
        width: 240,
        placeholder: "Search..."
    },
    editing: {
        refreshMode: "reshape",
        mode: "popup",
        allowUpdating: true,
        allowDeleting: true,
        allowAdding: true
    },
    columns: [
        "id",
        "first_name",
        "last_name",
        "age", {
            dataField: "position",
            width: 170
        }, {
            dataField: "starting_work",
            dataType: "date"
        }, {
            dataField: "salary"
        }
    ],
    summary: {
        totalItems: [{
            column: "first_name",
            summaryType: "count",
            displayFormat: "{0} rows"
        },
            {
                name: "SelectedRowsSummary",
                showInColumn: "Salary",
                column: "salary",
                displayFormat: "Sum: {0}",
                valueFormat: "currency",
                summaryType: "sum"
            }]
    },
    onContextMenuPreparing: function (e) {
        e.items = contextMenuItemsOdd
    }
}).dxDataGrid("instance");

/* ------------------------------ */

function sendRequest(url, method, data, callback) {
    callback = callback || function(){};
    var d = $.Deferred();
    method = method || "GET";

    $.ajax(url, {
        method: method || "GET",
        data: data,
        dataType: 'json',
        cache: false,
        xhrFields: {withCredentials: true},
        beforeSend: function(xhr, settings){
            // Excel export
            try {
              var add = 1;
              var queryString = decodeURIComponent(settings.url).split("?")[1]
              $.each(queryString.split("&"),function(key, value){
                  if(value.split("=")[0] == "skip") {
                      add--;
                  }
              });

              if (add > 0) {
                settings.url += "&" + $.param({skip: dataGrid.pageIndex() * dataGrid.pageSize(), take:  dataGrid.pageSize() })
              }
            } catch (e) {}
        }
    }).done(function (result) {

        d.resolve(result.data, {
            totalCount: result.totalCount,
            summary: result.summary,
            groupCount: result.groupCount
        });

        callback();
    }).fail(function (xhr) {
        d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
    });

    return d.promise();
}